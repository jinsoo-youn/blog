<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Woody&#39;s Blog</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content on Woody&#39;s Blog</description>
    <generator>Hugo -- 0.147.2</generator>
    <language>ko-kr</language>
    <lastBuildDate>Wed, 07 May 2025 20:52:24 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hello World</title>
      <link>http://localhost:1313/blog/posts/longhorn/</link>
      <pubDate>Wed, 07 May 2025 20:52:24 +0900</pubDate>
      <guid>http://localhost:1313/blog/posts/longhorn/</guid>
      <description>&lt;h1 id=&#34;kubernetes-longhorn-스토리지-구조와-운영-가이드&#34;&gt;Kubernetes Longhorn 스토리지 구조와 운영 가이드&lt;/h1&gt;
&lt;h2 id=&#34;1-longhorn-내부-구조&#34;&gt;1. Longhorn 내부 구조&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Longhorn 아키텍처 개요:&lt;/strong&gt; Longhorn은 Kubernetes 상에서 동작하는 &lt;strong&gt;분산 블록 스토리지 시스템&lt;/strong&gt;으로, 모든 제어 메타데이터를 Kubernetes Custom Resource로 관리합니다. Longhorn은 각 볼륨마다 독립적인 스토리지 컨트롤러(엔진)를 생성하고, 다수 노드에 걸쳐 **복제본(Replica)**들을 동기 복제하여 높은 가용성을 제공합니다. 이러한 Longhorn의 컨트롤 플레인은 &lt;code&gt;longhorn-manager&lt;/code&gt;라는 DaemonSet으로 구성되며, Kubernetes API (etcd)를 통해 CRD 자원으로 상태를 저장/조회합니다. Longhorn의 주요 컴포넌트와 데이터 흐름 관계를 아래 그림에 나타냈습니다.&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;그림 1: Longhorn 볼륨 엔진(Controller)과 다수 Replica의 관계&lt;/strong&gt; – 각 애플리케이션 Pod가 사용하는 Longhorn 볼륨마다 전용 &lt;strong&gt;엔진(스토리지 컨트롤러)&lt;/strong&gt; 프로세스가 생성되고, 엔진은 여러 노드에 분산된 &lt;strong&gt;Replica&lt;/strong&gt;들과 통신하며 블록 장치를 제공합니다. 모든 &lt;strong&gt;쓰기&lt;/strong&gt; 요청은 **엔진(Controller)**을 통해 모든 Replica에 동기적으로 복제되고, &lt;strong&gt;읽기&lt;/strong&gt; 요청은 정상 Replica 중 하나에서 수행됩니다. 하단의 Node1, Node2는 실제 물리 노드와 해당 디스크(SSD) 자원을 표현한 것입니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
